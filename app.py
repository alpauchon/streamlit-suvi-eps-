import streamlit as st
import pandas as pd

# -----------------------------------------------------------------------------
# Importation de ChatterBot pour le chatbot
# -----------------------------------------------------------------------------
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer

# -----------------------------------------------------------------------------
# Configuration de la page et injection de CSS pour un design moderne
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Suivi EPS", page_icon="üèÜ", layout="wide")

st.markdown("""
<style>
/* Fond global */
body {
    background-color: #f0f2f6;
}

/* Style pour les cartes (sections) */
.card {
    background: #ffffff;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Personnalisation des boutons */
.stButton>button {
    background-color: #2c3e50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 5px;
    font-size: 16px;
    margin: 5px;
}

/* Couleur des titres */
h1, h2, h3 {
    color: #2c3e50;
}
</style>
""", unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# Fonction utilitaire pour red√©marrer l'application
# -----------------------------------------------------------------------------
def rerun_app():
    if hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    elif hasattr(st, "rerun"):
        st.rerun()
    else:
        st.error("La fonction de red√©marrage automatique n'est pas disponible. Veuillez mettre √† jour Streamlit.")

# -----------------------------------------------------------------------------
# Chargement et sauvegarde des donn√©es
# -----------------------------------------------------------------------------
def load_data():
    try:
        df = pd.read_csv("students_data.csv")
        if df.empty:
            raise FileNotFoundError
        # Si la colonne "StudentCode" n'existe pas, on la cr√©e avec des valeurs vides,
        # sinon on remplace les valeurs manquantes par ""
        if "StudentCode" not in df.columns:
            df["StudentCode"] = ""
        else:
            df["StudentCode"] = df["StudentCode"].fillna("")
        # Assurer que "Pouvoirs" est de type cha√Æne
        df["Pouvoirs"] = df["Pouvoirs"].astype(str)
        # Conversion forc√©e des colonnes num√©riques
        for col in ["Niveau", "Points de Comp√©tence", "FAVEDS ü§∏", "Strat√©gie üß†", "Coop√©ration ü§ù", "Engagement üåü"]:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)
        print("[INFO] Donn√©es charg√©es avec succ√®s.")
        return df
    except FileNotFoundError:
        print("[WARNING] Fichier non trouv√©, cr√©ation d'un nouveau DataFrame.")
        return pd.DataFrame({
            "Nom": [], "Niveau": [], "Points de Comp√©tence": [],
            "FAVEDS ü§∏": [], "Strat√©gie üß†": [], "Coop√©ration ü§ù": [], "Engagement üåü": [],
            "R√¥les": [], "Pouvoirs": [], "StudentCode": []
        })

def save_data(df):
    df.to_csv("students_data.csv", index=False)
    print("[INFO] Donn√©es sauvegard√©es.")

if "students" not in st.session_state:
    st.session_state["students"] = load_data()

# -----------------------------------------------------------------------------
# Initialisation des variables de session pour l'acc√®s sp√©cialis√©
# -----------------------------------------------------------------------------
if "role" not in st.session_state:
    st.session_state["role"] = None
if "user" not in st.session_state:
    st.session_state["user"] = None
if "accepted_rules" not in st.session_state:
    st.session_state["accepted_rules"] = False
if "do_rerun" not in st.session_state:
    st.session_state["do_rerun"] = False

# -----------------------------------------------------------------------------
# Bloc d'acc√®s sp√©cialis√©
# -----------------------------------------------------------------------------
if st.session_state["role"] is None:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.title("Page d'acc√®s")
    access_mode = st.radio("Choisissez votre r√¥le", options=["Enseignant", "√âl√®ve"])
    if access_mode == "Enseignant":
        teacher_password = st.text_input("Entrez le code d'acc√®s enseignant :", type="password")
        if st.button("Se connecter comme enseignant", key="teacher_conn"):
            if teacher_password == st.secrets["ACCESS_CODE"]:
                st.session_state["role"] = "teacher"
                st.session_state["user"] = "Enseignant"
                st.session_state["do_rerun"] = True
                st.success("Acc√®s enseignant autoris√©.")
            else:
                st.error("Code incorrect.")
    else:  # Mode √âl√®ve
        if st.session_state["students"].empty:
            st.warning("Aucun √©l√®ve n'est enregistr√©. Veuillez contacter votre enseignant.")
        else:
            student_name = st.selectbox("Choisissez votre nom", st.session_state["students"]["Nom"])
            # R√©cup√©rer la ligne correspondant √† l'√©l√®ve s√©lectionn√©
            student_row = st.session_state["students"].loc[st.session_state["students"]["Nom"] == student_name].iloc[0]
            if student_row["StudentCode"] == "":
                st.info("Premi√®re connexion¬†: veuillez cr√©er un code d'acc√®s.")
                new_code = st.text_input("Cr√©ez un code d'acc√®s (au moins 4 caract√®res)", type="password", key="new_student_code")
                new_code_confirm = st.text_input("Confirmez votre code", type="password", key="new_student_code_confirm")
                if st.button("Enregistrer et se connecter", key="student_first_conn"):
                    if new_code != new_code_confirm:
                        st.error("Les codes ne correspondent pas.")
                    elif len(new_code) < 4:
                        st.error("Le code doit contenir au moins 4 caract√®res.")
                    else:
                        idx = st.session_state["students"].index[st.session_state["students"]["Nom"] == student_name][0]
                        st.session_state["students"].at[idx, "StudentCode"] = new_code
                        save_data(st.session_state["students"])
                        st.session_state["role"] = "student"
                        st.session_state["user"] = student_name
                        st.session_state["do_rerun"] = True
                        st.success(f"Acc√®s √©l√®ve autoris√© pour {student_name}.")
            else:
                code_entered = st.text_input("Entrez votre code d'acc√®s", type="password", key="existing_student_code")
                if st.button("Se connecter comme √©l√®ve", key="student_conn"):
                    if code_entered != student_row["StudentCode"]:
                        st.error("Code incorrect.")
                    else:
                        st.session_state["role"] = "student"
                        st.session_state["user"] = student_name
                        st.session_state["do_rerun"] = True
                        st.success(f"Acc√®s √©l√®ve autoris√© pour {student_name}.")
    st.markdown('</div>', unsafe_allow_html=True)
    if st.session_state["do_rerun"]:
        st.session_state["do_rerun"] = False
        rerun_app()
    st.stop()

# -----------------------------------------------------------------------------
# Bloc d'acceptation des r√®gles (commun aux deux modes)
# -----------------------------------------------------------------------------
if not st.session_state["accepted_rules"]:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.title("üìú R√®gles du syst√®me")
    st.markdown("""
    - L‚Äô√©l√®ve peut gagner **4 niveaux** par s√©ance de 45 minutes.
      - **1 niveau** pour le fair-play.
      - **1 niveau** pour le respect.
      - **1 niveau** pour l‚Äôinvestissement.
      - **1 niveau** pour l‚Äôatteinte des objectifs du cours.
    - Tous les √©l√®ves commencent avec le r√¥le **d‚ÄôApprenti(e)**.
    - **1 niveau = 5 points de comp√©tences** √† r√©partir librement.
    - Chaque √©l√®ve peut se sp√©cialiser dans **2 comp√©tences uniquement**.
    - L'√©l√®ve peut acheter des pouvoirs ou des r√¥les avec ses niveaux et comp√©tences.
    
       ### üè™ Boutique des r√¥les et pouvoirs
    | R√¥les | Points n√©cessaires | Comp√©tences requises | Explication |
    |---|---|---|---|
    | Testeur.euse | 200 | FAVEDS | Peut essayer en premier les nouveaux exercices. |
    | D√©monstrateur.rice | 150 | FAVEDS + Engagement | Pr√©sente les mouvements au reste du groupe. |
    | Facilitateur.rice | 150 | Coop√©ration + Engagement | Moins de r√©p√©titions impos√©es s‚Äôil ma√Ætrise d√©j√† l‚Äôexercice. |
    | Cr√©ateur.rice de r√®gles | 250 | Strat√©gie | Peut modifier certaines r√®gles des exercices. |
    | Meneur.euse tactique | 250 | Strat√©gie + Coop√©ration | Oriente une √©quipe et propose des strat√©gies. |
    | Arbitre / R√©gulateur.rice | 300 | Strat√©gie + Engagement | Aide √† g√©rer les litiges et les d√©cisions collectives. |
    | Aide-coach | 250 | Coop√©ration + Engagement | Peut accompagner un √©l√®ve en difficult√©. |
    | Coordinateur.rice de groupe | 300 | Coop√©ration | Premier choix des groupes. |
    | Facilitateur.rice (social) | 250 | Coop√©ration + Engagement | Peut proposer des ajustements pour favoriser l‚Äôint√©gration de tous. |
    | R√©ducteur.rice des contraintes | 200 | FAVEDS + Engagement | Acc√®s √† des versions simplifi√©es ou all√©g√©es des consignes. |
    | Autonome | 200 | Strat√©gie + Engagement | Peut choisir son propre parcours ou d√©fi. |
    | Responsable de s√©ance | 350 | Strat√©gie + Coop√©ration + Engagement | Peut diriger une partie de la s√©ance. |
    
    ### üè™ Boutique secr√®te
    | Co√ªt en niveau | Pouvoirs √† choix |
    |---|---|
    | 40 | Le malin / la maligne : doubler ses niveaux gagn√©s √† chaque cours. |
    | 50 | Choix d‚Äôun jeu (5 min) ou donner 20 niveaux √† quelqu‚Äôun. |
    | 100 | Ma√Ætre.sse des groupes pour une s√©ance de 1h30 ou doubler ses points de comp√©tences. |
    | 150 | Ma√Ætre.sse du th√®me d‚Äôune prochaine s√©ance. |
    | 300 | Roi / Reine de la s√©quence (permet de choisir le prochain th√®me que l‚Äôon fera pour 4 √† 6 cours). |
    """)
    if st.button("OK, j'ai compris les r√®gles", key="accept_rules"):
        st.session_state["accepted_rules"] = True
        st.session_state["do_rerun"] = True
    st.markdown('</div>', unsafe_allow_html=True)
    if st.session_state["do_rerun"]:
        st.session_state["do_rerun"] = False
        rerun_app()
    st.stop()

# -----------------------------------------------------------------------------
# D√©finition des pages disponibles selon le r√¥le
# -----------------------------------------------------------------------------
if st.session_state["role"] == "teacher":
    pages = ["Accueil", "Ajouter √âl√®ve", "Tableau de progression", "Fiche √âl√®ve", "Chatbot"]
else:  # Mode √âl√®ve
    pages = ["Accueil", "Tableau de progression", "Fiche √âl√®ve", "Chatbot"]

choice = st.sidebar.radio("Navigation", pages)

# -----------------------------------------------------------------------------
# Page d'accueil
# -----------------------------------------------------------------------------
if choice == "Accueil":
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.header("Bienvenue sur le Suivi EPS üèÜ")
    st.write("Utilisez le menu √† gauche pour naviguer entre les diff√©rentes sections de l'application.")
    st.markdown(f"**Mode d'acc√®s :** {st.session_state['role'].capitalize()} ({st.session_state['user']})")
    
    # Bouton de t√©l√©chargement r√©serv√© √† l'enseignant
    if st.session_state["role"] == "teacher":
        if st.download_button(
            "T√©l√©charger le fichier CSV",
            data=st.session_state["students"].to_csv(index=False),
            file_name="students_data.csv",
            mime="text/csv"
        ):
            st.success("Fichier t√©l√©charg√©.")
    st.markdown('</div>', unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# Page d'ajout d'√©l√®ve (enseignant uniquement)
# -----------------------------------------------------------------------------
elif choice == "Ajouter √âl√®ve":
    if st.session_state["role"] != "teacher":
        st.error("Acc√®s r√©serv√© aux enseignants.")
    else:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.header("‚ûï Ajout des participant.es")
        with st.form("ajouter_eleve_form"):
            nom = st.text_input("Nom")
            niveau = st.number_input("Niveau de d√©part", min_value=0, max_value=10000, step=1)
            points_comp = niveau * 5
            st.write(f"**Points de Comp√©tence disponibles :** {points_comp}")
            st.markdown("### Allocation des points entre les comp√©tences")
            remaining_points = points_comp
            faveds = st.number_input("FAVEDS ü§∏", min_value=0, max_value=remaining_points, step=1, value=0)
            remaining_points -= faveds
            strategie = st.number_input("Strat√©gie üß†", min_value=0, max_value=remaining_points, step=1, value=0)
            remaining_points -= strategie
            cooperation = st.number_input("Coop√©ration ü§ù", min_value=0, max_value=remaining_points, step=1, value=0)
            remaining_points -= cooperation
            engagement = st.number_input("Engagement üåü", min_value=0, max_value=remaining_points, step=1, value=remaining_points)
            submit_eleve = st.form_submit_button("Ajouter l'√©l√®ve")
        
        if submit_eleve and nom:
            new_data = pd.DataFrame({
                "Nom": [nom],
                "Niveau": [niveau],
                "Points de Comp√©tence": [points_comp],
                "FAVEDS ü§∏": [faveds],
                "Strat√©gie üß†": [strategie],
                "Coop√©ration ü§ù": [cooperation],
                "Engagement üåü": [engagement],
                "R√¥les": ["Apprenti(e)"],
                "Pouvoirs": [""],
                "StudentCode": [""]
            })
            st.session_state["students"] = pd.concat(
                [st.session_state["students"], new_data],
                ignore_index=True
            )
            # Reconvertir les colonnes num√©riques apr√®s ajout
            for col in ["Niveau", "Points de Comp√©tence", "FAVEDS ü§∏", "Strat√©gie üß†", "Coop√©ration ü§ù", "Engagement üåü"]:
                st.session_state["students"][col] = pd.to_numeric(st.session_state["students"][col], errors="coerce").fillna(0).astype(int)
            save_data(st.session_state["students"])
            st.success(f"‚úÖ {nom} ajout√© avec niveau {niveau} et r√©partition des points compl√©t√©e.")
        st.markdown('</div>', unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# Page du tableau de progression
# -----------------------------------------------------------------------------
elif choice == "Tableau de progression":
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.header("üìä Tableau de progression")
    st.markdown("**Modifiez directement les valeurs dans le tableau ci-dessous.**")
    # Fonction de validation de la somme des points attribu√©s aux comp√©tences
    def validate_competences(df):
        invalid = []
        for idx, row in df.iterrows():
            total_comp = row["FAVEDS ü§∏"] + row["Strat√©gie üß†"] + row["Coop√©ration ü§ù"] + row["Engagement üåü"]
            if total_comp > row["Points de Comp√©tence"]:
                invalid.append(row["Nom"])
        return invalid

    if st.session_state["role"] == "teacher":
        edited_df = st.data_editor(
            st.session_state["students"],
            num_rows="dynamic",
            use_container_width=True,
            key="editor_teacher"
        )
        if st.button("Enregistrer modifications", key="save_teacher"):
            invalid_rows = validate_competences(edited_df)
            if invalid_rows:
                st.error(f"Erreur¬†: les √©l√®ves suivants ont une somme de comp√©tences sup√©rieure aux points disponibles : {', '.join(invalid_rows)}")
            else:
                st.session_state["students"] = edited_df
                save_data(st.session_state["students"])
                st.success("Modifications enregistr√©es.")
    else:
        my_data = st.session_state["students"][st.session_state["students"]["Nom"] == st.session_state["user"]]
        edited_my_data = st.data_editor(
            my_data,
            use_container_width=True,
            key="editor_student"
        )
        if st.button("Enregistrer modifications", key="save_student"):
            invalid_rows = validate_competences(edited_my_data)
            if invalid_rows:
                st.error("Erreur¬†: la somme de vos points de comp√©tences d√©passe vos points disponibles.")
            else:
                df = st.session_state["students"].copy()
                idx = df.index[df["Nom"] == st.session_state["user"]]
                if len(idx) > 0:
                    df.loc[idx[0]] = edited_my_data.iloc[0]
                st.session_state["students"] = df
                save_data(st.session_state["students"])
                st.success("Vos modifications ont √©t√© enregistr√©es.")
    st.markdown('</div>', unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# Page de la fiche √©l√®ve
# -----------------------------------------------------------------------------
elif choice == "Fiche √âl√®ve":
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.header("üîç Fiche de l'√©l√®ve")
    if st.session_state["role"] == "teacher":
        selected_student = st.selectbox("Choisir un √©l√®ve", st.session_state["students"]["Nom"])
    else:
        selected_student = st.session_state["user"]
        st.info(f"Vous √™tes connect√©(e) en tant que {selected_student}.")
    
    if selected_student:
        student_data = st.session_state["students"].loc[
            st.session_state["students"]["Nom"] == selected_student
        ].iloc[0]
        st.subheader(f"üìå Fiche de {selected_student}")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**Niveau :** {student_data['Niveau']}")
            st.write(f"**Points de Comp√©tence :** {student_data['Points de Comp√©tence']}")
        with col2:
            st.write(f"**FAVEDS ü§∏ :** {student_data['FAVEDS ü§∏']}")
            st.write(f"**Strat√©gie üß† :** {student_data['Strat√©gie üß†']}")
            st.write(f"**Coop√©ration ü§ù :** {student_data['Coop√©ration ü§ù']}")
            st.write(f"**Engagement üåü :** {student_data['Engagement üåü']}")
        
        onglets = st.tabs(["üõí Boutique des Pouvoirs", "üèÖ Boutique des R√¥les"])
        
        with onglets[0]:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            store_items = {
                "Le malin / la maligne": 40,
                "Choix d‚Äôun jeu (5 min) ou donner 20 niveaux": 50,
                "Ma√Ætre des groupes (1h30) ou doubler points de comp√©tence": 100,
                "Ma√Ætre du th√®me d‚Äôune s√©ance": 150,
                "Roi / Reine de la s√©quence": 300
            }
            selected_item = st.selectbox("üõçÔ∏è Choisir un pouvoir", list(store_items.keys()), key="pouvoirs")
            cost = store_items[selected_item]
            st.info(f"üí∞ Co√ªt: {cost} niveaux")
            if st.button("Acheter ce pouvoir", key="acheter_pouvoir"):
                if int(student_data["Niveau"]) >= cost:
                    current_level = int(student_data["Niveau"])
                    new_level = current_level - cost
                    st.session_state["students"].loc[
                        st.session_state["students"]["Nom"] == selected_student, "Niveau"
                    ] = new_level
                    pouvoirs_anciens = str(student_data["Pouvoirs"]) if pd.notna(student_data["Pouvoirs"]) else ""
                    nouveaux_pouvoirs = pouvoirs_anciens + ", " + selected_item if pouvoirs_anciens else selected_item
                    st.session_state["students"].loc[
                        st.session_state["students"]["Nom"] == selected_student, "Pouvoirs"
                    ] = nouveaux_pouvoirs
                    save_data(st.session_state["students"])
                    st.success(f"üõçÔ∏è {selected_student} a achet√© '{selected_item}'.")
                else:
                    st.error("‚ùå Niveaux insuffisants !")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with onglets[1]:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            roles_store = {
                "üß™ Testeur.euse": {"Co√ªt": 200, "Comp√©tences Requises": ["FAVEDS ü§∏"]},
                "üé≠ D√©monstrateur.rice": {"Co√ªt": 150, "Comp√©tences Requises": ["FAVEDS ü§∏", "Engagement üåü"]},
                "üîß Facilitateur.rice": {"Co√ªt": 150, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                "‚öñÔ∏è Cr√©ateur.rice de r√®gles": {"Co√ªt": 250, "Comp√©tences Requises": ["Strat√©gie üß†"]},
                "üéØ Meneur.euse tactique": {"Co√ªt": 250, "Comp√©tences Requises": ["Strat√©gie üß†", "Coop√©ration ü§ù"]},
                "‚öñÔ∏è Arbitre / R√©gulateur.rice": {"Co√ªt": 300, "Comp√©tences Requises": ["Strat√©gie üß†", "Engagement üåü"]},
                "ü§ù Aide-Coach": {"Co√ªt": 250, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                "üìã Coordinateur.rice de groupe": {"Co√ªt": 300, "Comp√©tences Requises": ["Coop√©ration ü§ù"]},
                "üåç Facilitateur.rice (social)": {"Co√ªt": 250, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                "‚ö° R√©ducteur.rice des contraintes": {"Co√ªt": 200, "Comp√©tences Requises": ["FAVEDS ü§∏", "Engagement üåü"]},
                "üõ§Ô∏è Autonome": {"Co√ªt": 200, "Comp√©tences Requises": ["Strat√©gie üß†", "Engagement üåü"]},
                "üèÜ Responsable de s√©ance": {"Co√ªt": 350, "Comp√©tences Requises": ["Strat√©gie üß†", "Coop√©ration ü§ù", "Engagement üåü"]}
            }
            selected_role = st.selectbox("üé≠ Choisir un r√¥le", list(roles_store.keys()), key="roles")
            role_cost = roles_store[selected_role]["Co√ªt"]
            required_comp√©tences = roles_store[selected_role]["Comp√©tences Requises"]
            st.info(f"üí∞ Co√ªt: {role_cost} points de comp√©tence\n\nüîπ Comp√©tences requises: {', '.join(required_comp√©tences)}")
            if st.button("Acqu√©rir ce r√¥le", key="acheter_role"):
                student_comp√©tences = {
                    "FAVEDS ü§∏": int(student_data["FAVEDS ü§∏"]),
                    "Strat√©gie üß†": int(student_data["Strat√©gie üß†"]),
                    "Coop√©ration ü§ù": int(student_data["Coop√©ration ü§ù"]),
                    "Engagement üåü": int(student_data["Engagement üåü"])
                }
                if int(student_data["Points de Comp√©tence"]) >= role_cost and all(student_comp√©tences[comp] > 0 for comp in required_comp√©tences):
                    current_points = int(student_data["Points de Comp√©tence"])
                    new_points = current_points - role_cost
                    st.session_state["students"].loc[
                        st.session_state["students"]["Nom"] == selected_student, "Points de Comp√©tence"
                    ] = new_points
                    roles_anciens = str(student_data["R√¥les"]) if pd.notna(student_data["R√¥les"]) else ""
                    nouveaux_roles = roles_anciens + ", " + selected_role if roles_anciens else selected_role
                    st.session_state["students"].loc[
                        st.session_state["students"]["Nom"] == selected_student, "R√¥les"
                    ] = nouveaux_roles
                    save_data(st.session_state["students"])
                    st.success(f"üèÖ {selected_student} a acquis le r√¥le '{selected_role}'.")
                else:
                    st.error("‚ùå Points de comp√©tence insuffisants ou comp√©tences requises non atteintes !")
            st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.warning("Aucun √©l√®ve n'a encore √©t√© ajout√©. Veuillez ajouter un √©l√®ve dans la section 'Ajouter √âl√®ve'.")
    st.markdown('</div>', unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# Page Chatbot (accessible √† tous)
# -----------------------------------------------------------------------------
elif choice == "Chatbot":
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.header("Chatbot interactif")
    # Initialiser le chatbot dans la session s'il n'est pas d√©j√† pr√©sent
    if "chatbot" not in st.session_state:
        st.session_state["chatbot"] = ChatBot(
            'Assistant',
            storage_adapter='chatterbot.storage.SQLStorageAdapter',
            database_uri='sqlite:///database.sqlite3'
        )
        trainer = ChatterBotCorpusTrainer(st.session_state["chatbot"])
        try:
            # Entra√Ænement avec le corpus fran√ßais
            trainer.train("chatterbot.corpus.french")
        except Exception as e:
            st.error("Erreur lors de l'entra√Ænement du chatbot : " + str(e))
    if "chat_history" not in st.session_state:
        st.session_state["chat_history"] = []
    user_question = st.text_input("Posez votre question ici :", key="chat_input")
    if st.button("Envoyer", key="send_chat"):
        if user_question:
            st.session_state["chat_history"].append(("Vous", user_question))
            response = st.session_state["chatbot"].get_response(user_question)
            st.session_state["chat_history"].append(("Chatbot", str(response)))
    for sender, text in st.session_state["chat_history"]:
        st.write(f"**{sender} :** {text}")
    st.markdown('</div>', unsafe_allow_html=True)
