import streamlit as st
import pandas as pd
from pymongo import MongoClient
import os

# Connexion √† MongoDB Atlas via st.secrets
MONGO_URI = st.secrets["MONGO_URI"]
client = MongoClient(MONGO_URI)
db = client["SuiviEPS"]

# Fonctions Hall of Fame
def load_hof():
    collection = db.hall_of_fame
    data = list(collection.find({}, {"_id": 0}))
    if not data:
        return [{"name": "", "achievement": ""} for _ in range(3)]
    return data

def save_hof(hof_data):
    collection = db.hall_of_fame
    collection.delete_many({})
    if hof_data:
        collection.insert_many(hof_data)

# Fonctions gestion des √©l√®ves (stock√© MongoDB)
def load_data():
    collection = db.students
    data = list(collection.find({}, {"_id": 0}))
    if not data:
        df = pd.DataFrame({
            "Nom": [],
            "Niveau": [],
            "Points de Comp√©tence": [],
            "R√¥les": [],
            "Pouvoirs": [],
            "StudentCode": [],
        })
    else:
        df = pd.DataFrame(data)
        df = df.rename(columns={"Points_de_Competence": "Points de Comp√©tence"})
    return df

def save_data(df):
    df_to_save = df.rename(columns={"Points de Comp√©tence": "Points_de_Competence"})
    collection = db.students
    collection.delete_many({})
    records = df_to_save.to_dict(orient="records")
    if records:
        collection.insert_many(records)
    st.write("[INFO] Donn√©es sauvegard√©es.")

# Chargement initial des donn√©es
if "students" not in st.session_state:
    st.session_state["students"] = load_data()
if "role" not in st.session_state:
    st.session_state["role"] = None
if "user" not in st.session_state:
    st.session_state["user"] = None
if "accepted_rules" not in st.session_state:
    st.session_state["accepted_rules"] = False

# Page d'acc√®s
if st.session_state["role"] is None:
    st.title("Page d'acc√®s")
    access_mode = st.radio("Choisissez votre r√¥le", options=["Enseignant", "√âl√®ve"])
    if access_mode == "Enseignant":
        teacher_password = st.text_input("Entrez le code d'acc√®s enseignant :", type="password")
        if st.button("Se connecter comme enseignant", key="teacher_conn"):
            if teacher_password == st.secrets["ACCESS_CODE"]:
                st.session_state["role"] = "teacher"
                st.session_state["user"] = "Enseignant"
                st.success("Acc√®s enseignant autoris√©.")
            else:
                st.error("Code incorrect.")
    else:
        if st.session_state["students"].empty:
            st.warning("Aucun √©l√®ve n'est enregistr√©. Veuillez contacter votre enseignant.")
        else:
            student_name = st.selectbox("Choisissez votre nom", st.session_state["students"]["Nom"])
            student_row = st.session_state["students"].loc[st.session_state["students"]["Nom"] == student_name].iloc[0]
            if student_row["StudentCode"] == "":
                st.info("Premi√®re connexion : veuillez cr√©er un code d'acc√®s.")
                new_code = st.text_input("Cr√©ez un code d'acc√®s (min. 4 caract√®res)", type="password", key="new_student_code")
                new_code_confirm = st.text_input("Confirmez votre code", type="password", key="new_student_code_confirm")
                if st.button("Enregistrer et se connecter", key="student_first_conn"):
                    if new_code != new_code_confirm:
                        st.error("Les codes ne correspondent pas.")
                    elif len(new_code) < 4:
                        st.error("Le code doit contenir au moins 4 caract√®res.")
                    else:
                        idx = st.session_state["students"].index[st.session_state["students"]["Nom"] == student_name][0]
                        st.session_state["students"].at[idx, "StudentCode"] = new_code
                        save_data(st.session_state["students"])
                        st.session_state["role"] = "student"
                        st.session_state["user"] = student_name
                        st.success(f"Acc√®s √©l√®ve autoris√© pour {student_name}.")
            else:
                code_entered = st.text_input("Entrez votre code d'acc√®s", type="password", key="existing_student_code")
                if st.button("Se connecter comme √©l√®ve", key="student_conn"):
                    if code_entered != student_row["StudentCode"]:
                        st.error("Code incorrect.")
                    else:
                        st.session_state["role"] = "student"
                        st.session_state["user"] = student_name
                        st.success(f"Acc√®s √©l√®ve autoris√© pour {student_name}.")
    st.stop()

# Bloc d'acceptation des r√®gles
if not st.session_state["accepted_rules"]:
    st.title("üìú R√®gles du syst√®me")
    st.markdown("""
### üîπ El√©ments g√©n√©raux
- **L'utilisation du site n'est en aucun cas obligatoire, l'exp√©rience durant les cours d'√©ducation physique sportive et artistique restera la m√™me si l'√©l√®ve d√©cide de ne pas l'utiliser.**
- L‚Äô√©l√®ve peut gagner **4 niveaux** par s√©ance de 45 minutes.
- 1 niveau pour le fair-play, le respect, l‚Äôinvestissement et l‚Äôatteinte des objectifs.
- Tous les √©l√®ves commencent avec le r√¥le **d‚ÄôApprenti(e)**.
- 1 niveau = **5 points de comp√©tences**.
- Chaque √©l√®ve peut se sp√©cialiser dans **3 comp√©tences** uniquement.
- L'√©l√®ve peut acheter des pouvoirs ou des r√¥les avec ses niveaux et comp√©tences.
- **L'√©l√®ve n'a pas le droit de se rajouter des niveaux ou points de comp√©tence sous peine d'exclusion imm√©diate**.
- L'utilisation du site peut prendre fin √† tout moment si l'enseignant le juge n√©cessaire, mais au plus tard durant la fin de l'ann√©e scolaire.

### üîπ Acc√®s et utilisation
- **Le site est un outil p√©dagogique** et ne doit pas √™tre utilis√© pour nuire aux autres ou perturber le d√©roulement des s√©ances.
- **L‚Äôacc√®s √† son compte est personnel** et ne doit pas √™tre partag√© avec d‚Äôautres √©l√®ves.

### üîπ Attribution et gestion des niveaux
- Un √©l√®ve peut **proposer une auto-√©valuation** de ses niveaux, mais la validation finale revient √† l‚Äôenseignant.
- **Le gain de niveaux d√©pend de crit√®res pr√©cis** (fair-play, investissement,‚Ä¶). **Aucun niveau n'est automatique.**

### üîπ S√©curit√© et fair-play
- **Le harc√®lement** via le classement ou les points de comp√©tence est **strictement interdit**.
- **L'enseignant peut modifier, retirer ou ajuster des niveaux en cas de comportement inappropri√©**.
- **Aucun √©l√®ve ne peut voir les statistiques individuelles des autres** mise √† part le top ten.

### üîπ Boutique des pouvoirs et r√¥les
- **Les pouvoirs et r√¥les ne doivent pas √™tre utilis√©s pour d√©savantager les autres √©l√®ves**.

### üîπ Questions 
- L'√©l√®ve contacte directement l'enseignant pour toutes questions en lien avec le site ou les cours de sport.

### Boutique des r√¥les et pouvoirs

| R√¥le                          | Points de comp√©tence n√©cessaires | Explication                                                    |
|-------------------------------|--------------------|----------------------------------------------------------------|
| Testeur.euse                  | 200                | Peut essayer en premier les nouveaux exercices.                |
| D√©monstrateur.rice            | 150                | Pr√©sente les mouvements au reste du groupe.                    |
| Facilitateur.rice             | 150                | Moins de r√©p√©titions impos√©es s‚Äôil ma√Ætrise d√©j√† l‚Äôexercice.   |
| Cr√©ateur.rice de r√®gles       | 250                | Peut modifier certaines r√®gles des exercices.                  |
| Meneur.euse tactique          | 250                | Oriente une √©quipe et propose des strat√©gies.                  |
| Arbitre / R√©gulateur.rice     | 300                | Aide √† g√©rer les litiges et d√©cisions collectives.             |
| Aide-coach                    | 250                | Peut accompagner un √©l√®ve en difficult√©.                       |
| Coordinateur.rice de groupe   | 300                | Premier choix des groupes.                                     |
| Facilitateur.rice (social)    | 250                | Favorise l‚Äôint√©gration de tous.                                |
| R√©ducteur.rice des contraintes| 200                | Acc√®s √† des versions simplifi√©es des consignes.                |
| Autonome                      | 200                | Peut choisir son propre parcours ou d√©fi.                      |
| Responsable de s√©ance         | 350                | Peut diriger une partie de la s√©ance.                          |


### Boutique secr√®te
| Co√ªt en niveau | Pouvoirs √† choix                                                                                   |
|---------------|----------------------------------------------------------------------------------------------------|
| 40            | Le malin / la maligne : doubler ses niveaux gagn√©s √† chaque cours.                                 |
| 50            | Choix d‚Äôun jeu (5 min) ou donner 20 niveaux √† quelqu‚Äôun.                                            |
| 100           | Ma√Ætre.sse des groupes pour une s√©ance de 1h30 ou doubler ses points de comp√©tences.                 |
| 150           | Ma√Ætre.sse du th√®me d‚Äôune prochaine s√©ance.                                                        |
| 300           | Roi / Reine de la s√©quence : permet de choisir le prochain th√®me pour 4 √† 6 cours.                   |
    """)
    if st.button("Je confirme avoir lu les r√®gles et m'engager √† les respecter", key="accept_rules"):
        st.session_state["accepted_rules"] = True
    st.stop()



# Pages disponibles
if st.session_state["role"] == "teacher":
    pages = ["Accueil", "Ajouter √âl√®ve", "Tableau de progression", "Attribution de niveaux", "Hall of Fame", "Leaderboard", "Vid√©o", "Fiche √âl√®ve"]
else:
    pages = ["Accueil", "Tableau de progression", "Hall of Fame", "Leaderboard", "Vid√©o", "Fiche √âl√®ve"]

choice = st.sidebar.radio("Navigation", pages)

# PAGE ACCUEIL
if choice == "Accueil":
    st.header("Bienvenue sur Suivi EPS üèÜ")
    st.write("Utilisez le menu √† gauche pour naviguer entre les sections.")
    st.markdown(f"**Mode d'acc√®s :** {st.session_state['role'].capitalize()} ({st.session_state['user']})")
    if st.session_state["role"] == "teacher":
        st.download_button("T√©l√©charger le fichier CSV", data=st.session_state["students"].to_csv(index=False), file_name="students_data.csv", mime="text/csv")

# AJOUTER ELEVE
elif choice == "Ajouter √âl√®ve":
    if st.session_state["role"] != "teacher":
        st.error("Acc√®s r√©serv√© aux enseignants.")
    else:
        st.header("‚ûï Ajout des participant.e.s")
        with st.form("ajouter_eleve_form"):
            nom = st.text_input("Nom")
            niveau = st.number_input("Niveau de d√©part", min_value=0, max_value=10000, step=1)
            points_comp = niveau * 5
            st.write(f"**Points de Comp√©tence disponibles :** {points_comp}")
            submit_eleve = st.form_submit_button("Ajouter l'√©l√®ve")
        if submit_eleve and nom:
            new_data = pd.DataFrame({
                "Nom": [nom],
                "Niveau": [niveau],
                "Points de Comp√©tence": [points_comp],
                "R√¥les": ["Apprenti(e)"],
                "Pouvoirs": [""],
                "StudentCode": [""],
            })
            st.session_state["students"] = pd.concat([st.session_state["students"], new_data], ignore_index=True)
            for col in ["Niveau", "Points de Comp√©tence"]:
                st.session_state["students"][col] = pd.to_numeric(st.session_state["students"][col], errors="coerce").fillna(0).astype(int)
            save_data(st.session_state["students"])
            st.success(f"‚úÖ {nom} ajout√© avec niveau {niveau}.")

# TABLEAU DE PROGRESSION
elif choice == "Tableau de progression":
    st.header("üìä Tableau de progression")
    if st.session_state["role"] == "teacher":
        df = st.data_editor(st.session_state["students"], use_container_width=True)
        if st.button("Enregistrer modifications"):
            st.session_state["students"] = df
            save_data(df)
    else:
        student = st.session_state["user"]
        df = st.session_state["students"][st.session_state["students"]["Nom"] == student]
        st.data_editor(df, use_container_width=True)

# ATTRIBUTION DE NIVEAUX
elif choice == "Attribution de niveaux":
    if st.session_state["role"] != "teacher":
        st.error("Acc√®s r√©serv√© aux enseignants.")
    else:
        st.header("üè∑Ô∏è Attribution de niveaux")
        with st.form("assign_form"):
            selected = st.multiselect("S√©lectionnez √©l√®ves", st.session_state["students"]["Nom"].tolist())
            levels = st.number_input("Niveaux √† ajouter", min_value=1, step=1)
            submit = st.form_submit_button("Ajouter")
        if submit:
            for nom in selected:
                idx = st.session_state["students"].index[st.session_state["students"]["Nom"] == nom][0]
                st.session_state["students"].at[idx, "Niveau"] += levels
                st.session_state["students"].at[idx, "Points de Comp√©tence"] += levels * 5
            save_data(st.session_state["students"])
            st.success("Attributions appliqu√©es.")

# HALL OF FAME
elif choice == "Hall of Fame":
    st.header("üèÜ Hall of Fame")
    hof_data = load_hof()
    st.session_state["hall_of_fame"] = hof_data
    if st.session_state["role"] == "teacher":
        st.subheader("Modifier le Hall of Fame")
        nb_entries = st.number_input("Nombre d'√©l√®ves √† mettre en lumi√®re", min_value=1, max_value=5, 
                                     value=len(st.session_state["hall_of_fame"]) if st.session_state["hall_of_fame"] else 3, 
                                     step=1)
        with st.form("hall_of_fame_form"):
            new_entries = []
            for i in range(nb_entries):
                st.write(f"### √âl√®ve {i+1}")
                options = st.session_state["students"]["Nom"].tolist()
                default_name = st.session_state["hall_of_fame"][i]["name"] if i < len(st.session_state["hall_of_fame"]) else ""
                name = st.selectbox(f"Nom de l'√©l√®ve {i+1}", options=options, index=options.index(default_name) if default_name in options else 0, key=f"hof_name_{i}")
                default_achievement = st.session_state["hall_of_fame"][i]["achievement"] if i < len(st.session_state["hall_of_fame"]) else ""
                achievement = st.text_area(f"Exploits de {name}", value=default_achievement, key=f"hof_achievement_{i}")
                new_entries.append({"name": name, "achievement": achievement})
            if st.form_submit_button("Enregistrer le Hall of Fame"):
                st.session_state["hall_of_fame"] = new_entries
                save_hof(new_entries)
                st.success("Hall of Fame mis √† jour.")
    st.subheader("Les Exploits")
    for entry in st.session_state["hall_of_fame"]:
        if entry["name"]:
            st.markdown(f"**{entry['name']}** : {entry['achievement']}")
        else:
            st.markdown("*Entr√©e vide*")

# LEADERBOARD
elif choice == "Leaderboard":
    st.header("üèÜ Leaderboard")
    leaderboard = st.session_state["students"].sort_values("Points de Comp√©tence", ascending=False)
    st.subheader("Le top ten")
    top10 = leaderboard.head(10)
    for rank, (_, row) in enumerate(top10.iterrows(), start=1):
        st.markdown(
            f"**{rank}. {row['Nom']}** - Niveau: {row['Niveau']} - Points: {row['Points de Comp√©tence']}<br>"
            f"**R√¥le:** {row['R√¥les']} | **Pouvoirs:** {row['Pouvoirs']} :trophy:",
            unsafe_allow_html=True
        )

# VIDEO
elif choice == "Vid√©o":
    st.header("üìπ Vid√©o")
    video_filename = "uploaded_video.mp4"
    if st.session_state["role"] == "teacher":
        st.subheader("G√©rer la vid√©o")
        uploaded_file = st.file_uploader("Uploader une vid√©o (MP4)", type=["mp4"])
        col1, col2 = st.columns(2)
        with col1:
            if uploaded_file is not None:
                with open(video_filename, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.success("Vid√©o t√©l√©charg√©e avec succ√®s!")
        with col2:
            if os.path.exists(video_filename):
                if st.button("Retirer la vid√©o"):
                    os.remove(video_filename)
                    st.success("Vid√©o retir√©e avec succ√®s!")
    if os.path.exists(video_filename):
        st.video(video_filename)
    else:
        st.info("Aucune vid√©o n'a encore √©t√© t√©l√©charg√©e.")

# FICHE ELEVE
elif choice == "Fiche √âl√®ve":
    st.header("üîç Fiche de l'√©l√®ve")
    if st.session_state["role"] == "teacher":
        selected_student = st.selectbox("Choisir un √©l√®ve", st.session_state["students"]["Nom"])
    else:
        selected_student = st.session_state["user"]
        st.info(f"Vous √™tes connect√©(e) en tant que {selected_student}.")
    if selected_student:
        student_data = st.session_state["students"].loc[st.session_state["students"]["Nom"] == selected_student].iloc[0]
        st.subheader(f"üìå Fiche de {selected_student}")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**Niveau :** {student_data['Niveau']}")
            st.write(f"**Points de Comp√©tence :** {student_data['Points de Comp√©tence']}")
            if st.button("F√™ter ma progression"):
                st.balloons()
        onglets = st.tabs(["üõí Boutique des Pouvoirs", "üèÖ Boutique des R√¥les"])
        with onglets[0]:
            store_items = {
                "Le malin / la maligne": 40,
                "Choix d‚Äôun jeu (5 min) ou donner 20 niveaux": 50,
                "Ma√Ætre des groupes (1h30) ou doubler points de comp√©tence": 100,
                "Ma√Ætre du th√®me d‚Äôune s√©ance": 150,
                "Roi / Reine de la s√©quence": 300
            }
            selected_item = st.selectbox("üõçÔ∏è Choisir un pouvoir", list(store_items.keys()), key="pouvoirs")
            cost = store_items[selected_item]
            st.info(f"üí∞ Co√ªt: {cost} niveaux")
            if st.button("Acheter ce pouvoir", key="acheter_pouvoir"):
                if int(student_data["Niveau"]) >= cost:
                    current_level = int(student_data["Niveau"])
                    new_level = current_level - cost
                    st.session_state["students"].loc[st.session_state["students"]["Nom"] == selected_student, "Niveau"] = new_level
                    anciens_pouvoirs = str(student_data["Pouvoirs"]) if pd.notna(student_data["Pouvoirs"]) else ""
                    nouveaux_pouvoirs = anciens_pouvoirs + ", " + selected_item if anciens_pouvoirs else selected_item
                    st.session_state["students"].loc[st.session_state["students"]["Nom"] == selected_student, "Pouvoirs"] = nouveaux_pouvoirs
                    save_data(st.session_state["students"])
                    st.success(f"üõçÔ∏è {selected_student} a achet√© '{selected_item}'.")
                else:
                    st.error("‚ùå Niveaux insuffisants !")
        with onglets[1]:
            roles_store = {
                "Testeur.euse": 200,
                "D√©monstrateur.rice": 150,
                "Facilitateur.rice": 150,
                "Cr√©ateur.rice de r√®gles": 250,
                "Meneur.euse tactique": 250,
                "Arbitre / R√©gulateur.rice": 300,
                "Aide-coach": 250,
                "Coordinateur.rice de groupe": 300,
                "Facilitateur.rice (social)": 250,
                "R√©ducteur.rice des contraintes": 200,
                "Autonome": 200,
                "Responsable de s√©ance": 350
            }
            selected_role = st.selectbox("üé≠ Choisir un r√¥le", list(roles_store.keys()), key="roles")
            role_cost = roles_store[selected_role]
            st.info(f"üí∞ Co√ªt: {role_cost} points de comp√©tence")
            if st.button("Acqu√©rir ce r√¥le", key="acheter_role"):
                if int(student_data["Points de Comp√©tence"]) >= role_cost:
                    current_points = int(student_data["Points de Comp√©tence"])
                    new_points = current_points - role_cost
                    st.session_state["students"].loc[st.session_state["students"]["Nom"] == selected_student, "Points de Comp√©tence"] = new_points
                    anciens_roles = str(student_data["R√¥les"]) if pd.notna(student_data["R√¥les"]) else ""
                    nouveaux_roles = anciens_roles + ", " + selected_role if anciens_roles else selected_role
                    st.session_state["students"].loc[st.session_state["students"]["Nom"] == selected_student, "R√¥les"] = nouveaux_roles
                    save_data(st.session_state["students"])
                    st.success(f"üèÖ {selected_student} a acquis le r√¥le '{selected_role}'.")
                else:
                    st.error("‚ùå Points de comp√©tence insuffisants !")
