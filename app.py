import streamlit as st
import pandas as pd

# -----------------------------------------------------------------------------
# Configuration de la page et injection de CSS personnalis√©
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Suivi EPS", page_icon="üèÜ", layout="wide")

st.markdown(
    """
    <style>
    /* Fond de page */
    body {
        background-color: #f0f2f6;
    }
    /* Personnalisation des boutons */
    .stButton>button {
        background-color: #2c3e50;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        font-size: 16px;
        margin: 5px;
    }
    /* Personnalisation des titres */
    h1, h2, h3 {
        color: #2c3e50;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# -----------------------------------------------------------------------------
# Initialisation des variables de session
# -----------------------------------------------------------------------------
if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False
if "accepted_rules" not in st.session_state:
    st.session_state["accepted_rules"] = False

# -----------------------------------------------------------------------------
# Bloc d'authentification
# -----------------------------------------------------------------------------
def check_password():
    user_password = st.text_input("üîë Entrez le code d'acc√®s :", type="password")
    if st.button("Valider"):
        if user_password == st.secrets["ACCESS_CODE"]:
            st.session_state["authenticated"] = True
            st.success("‚úÖ Acc√®s autoris√© !")
            st.experimental_rerun()
        else:
            st.error("‚ùå Code incorrect, essayez encore.")

if not st.session_state["authenticated"]:
    st.title("üîí Espace s√©curis√©")
    check_password()
    st.stop()

# -----------------------------------------------------------------------------
# Bloc d'acceptation des r√®gles
# -----------------------------------------------------------------------------
if not st.session_state["accepted_rules"]:
    st.title("üìú R√®gles du Jeu")
    st.markdown(
        """
        - L‚Äô√©l√®ve peut gagner **4 niveaux** par s√©ance de 45 minutes.
          - **1 niveau** pour le fair-play.
          - **1 niveau** pour le respect.
          - **1 niveau** pour l‚Äôinvestissement.
          - **1 niveau** pour l‚Äôatteinte des objectifs du cours.
        - Tous les √©l√®ves commencent avec le r√¥le **d‚ÄôApprenti(e)**.
        - **1 niveau = 5 points de comp√©tences** √† r√©partir librement.
        - Chaque √©l√®ve peut se sp√©cialiser dans **2 comp√©tences uniquement**.
        
           ### üè™ Boutique des r√¥les et pouvoirs
        | R√¥les | Points n√©cessaires | Comp√©tences requises | Explication |
        |---|---|---|---|
        | Testeur.euse | 200 | FAVEDS | Peut essayer en premier les nouveaux exercices. |
        | D√©monstrateur.rice | 150 | FAVEDS + Engagement | Pr√©sente les mouvements au reste du groupe. |
        | Facilitateur.rice | 150 | Coop√©ration + Engagement | Moins de r√©p√©titions impos√©es s‚Äôil ma√Ætrise d√©j√† l‚Äôexercice. |
        | Cr√©ateur.rice de r√®gles | 250 | Strat√©gie | Peut modifier certaines r√®gles des exercices. |
        | Meneur.euse tactique | 250 | Strat√©gie + Coop√©ration | Oriente une √©quipe et propose des strat√©gies. |
        | Arbitre / R√©gulateur.rice | 300 | Strat√©gie + Engagement | Aide √† g√©rer les litiges et les d√©cisions collectives. |
        | Aide-coach | 250 | Coop√©ration + Engagement | Peut accompagner un √©l√®ve en difficult√©. |
        | Coordinateur.rice de groupe | 300 | Coop√©ration | Premier choix des groupes. |
        | Facilitateur.rice (social) | 250 | Coop√©ration + Engagement | Peut proposer des ajustements pour favoriser l‚Äôint√©gration de tous. |
        | R√©ducteur.rice des contraintes | 200 | FAVEDS + Engagement | Acc√®s √† des versions simplifi√©es ou all√©g√©es des consignes. |
        | Autonome | 200 | Strat√©gie + Engagement | Peut choisir son propre parcours ou d√©fi. |
        | Responsable de s√©ance | 350 | Strat√©gie + Coop√©ration + Engagement | Peut diriger une partie de la s√©ance. |
        
        ### üè™ Boutique secr√®te
        | Co√ªt en niveau | Pouvoirs √† choix |
        |---|---|
        | 40 | Le malin / la maligne : doubler ses niveaux gagn√©s √† chaque cours. |
        | 50 | Choix d‚Äôun jeu (5 min) ou donner 20 niveaux √† quelqu‚Äôun. |
        | 100 | Ma√Ætre.sse des groupes pour une s√©ance de 1h30 ou doubler ses points de comp√©tences. |
        | 150 | Ma√Ætre.sse du th√®me d‚Äôune prochaine s√©ance. |
        | 300 | Roi / Reine de la s√©quence (permet de choisir le prochain th√®me que l‚Äôon fera pour 4 √† 6 cours). |
        """
    )
    if st.button("OK, j'ai compris les r√®gles"):
        st.session_state["accepted_rules"] = True
        st.experimental_rerun()
    st.stop()

# -----------------------------------------------------------------------------
# Fonctions de chargement et sauvegarde des donn√©es
# -----------------------------------------------------------------------------
def load_data():
    try:
        df = pd.read_csv("students_data.csv")
        if df.empty:
            raise FileNotFoundError
        df["Pouvoirs"] = df["Pouvoirs"].astype(str)
        print("[INFO] Donn√©es charg√©es avec succ√®s.")
        return df.fillna(0)
    except FileNotFoundError:
        print("[WARNING] Fichier non trouv√©, cr√©ation d'un nouveau DataFrame.")
        return pd.DataFrame({
            "Nom": [], "Niveau": [], "Points de Comp√©tence": [],
            "FAVEDS ü§∏": [], "Strat√©gie üß†": [], "Coop√©ration ü§ù": [], "Engagement üåü": [],
            "R√¥les": [], "Pouvoirs": []
        })

def save_data(df):
    df.to_csv("students_data.csv", index=False)
    print("[INFO] Donn√©es sauvegard√©es.")

if "students" not in st.session_state:
    st.session_state["students"] = load_data()

# -----------------------------------------------------------------------------
# Barre lat√©rale de navigation
# -----------------------------------------------------------------------------
pages = ["Accueil", "Ajouter √âl√®ve", "Tableau de progression", "Fiche √âl√®ve"]
choice = st.sidebar.radio("Navigation", pages)

# -----------------------------------------------------------------------------
# Page d'accueil
# -----------------------------------------------------------------------------
if choice == "Accueil":
    st.header("Bienvenue sur le Suivi EPS üèÜ")
    st.write("Utilisez le menu √† gauche pour naviguer entre les diff√©rentes sections de l'application.")

# -----------------------------------------------------------------------------
# Page d'ajout d'√©l√®ve
# -----------------------------------------------------------------------------
elif choice == "Ajouter √âl√®ve":
    st.header("‚ûï Ajout des participant.es")
    with st.form("ajouter_eleve_form"):
        nom = st.text_input("Nom")
        niveau = st.number_input("Niveau de d√©part", min_value=0, max_value=10000, step=1)
        points_comp = niveau * 5
        st.write(f"**Points de Comp√©tence disponibles :** {points_comp}")
        st.markdown("### Allocation des points entre les comp√©tences")
        remaining_points = points_comp
        faveds = st.number_input("FAVEDS ü§∏", min_value=0, max_value=remaining_points, step=1, value=0)
        remaining_points -= faveds
        strategie = st.number_input("Strat√©gie üß†", min_value=0, max_value=remaining_points, step=1, value=0)
        remaining_points -= strategie
        cooperation = st.number_input("Coop√©ration ü§ù", min_value=0, max_value=remaining_points, step=1, value=0)
        remaining_points -= cooperation
        engagement = st.number_input("Engagement üåü", min_value=0, max_value=remaining_points, step=1, value=remaining_points)
        submit_eleve = st.form_submit_button("Ajouter l'√©l√®ve")
    
    if submit_eleve and nom:
        new_data = pd.DataFrame({
            "Nom": [nom],
            "Niveau": [niveau],
            "Points de Comp√©tence": [points_comp],
            "FAVEDS ü§∏": [faveds],
            "Strat√©gie üß†": [strategie],
            "Coop√©ration ü§ù": [cooperation],
            "Engagement üåü": [engagement],
            "R√¥les": ["Apprenti(e)"],
            "Pouvoirs": [""]
        })
        st.session_state["students"] = pd.concat(
            [st.session_state["students"], new_data],
            ignore_index=True
        ).fillna("")
        save_data(st.session_state["students"])
        st.success(f"‚úÖ {nom} ajout√© avec niveau {niveau} et r√©partition des points compl√©t√©e.")

# -----------------------------------------------------------------------------
# Page du tableau de progression
# -----------------------------------------------------------------------------
elif choice == "Tableau de progression":
    st.header("üìä Tableau de progression")
    st.markdown("**Modifiez directement les valeurs dans le tableau ci-dessous.**")
    if not st.session_state["students"].empty:
        st.session_state["students"] = st.data_editor(
            st.session_state["students"],
            num_rows="dynamic",
            use_container_width=True
        ).fillna("")
        save_data(st.session_state["students"])
        st.info("[INFO] Tableau des √©l√®ves mis √† jour.")
    else:
        st.warning("Aucun √©l√®ve n'a encore √©t√© ajout√©.")

# -----------------------------------------------------------------------------
# Page de la fiche √©l√®ve et boutiques associ√©es
# -----------------------------------------------------------------------------
elif choice == "Fiche √âl√®ve":
    st.header("üîç Fiche de l'√©l√®ve")
    if not st.session_state["students"].empty:
        selected_student = st.selectbox("Choisir un √©l√®ve", st.session_state["students"]["Nom"])
        if selected_student:
            student_data = st.session_state["students"].loc[
                st.session_state["students"]["Nom"] == selected_student
            ].iloc[0]
            with st.container():
                st.subheader(f"üìå Fiche de {selected_student}")
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Niveau :** {student_data['Niveau']}")
                    st.write(f"**Points de Comp√©tence :** {student_data['Points de Comp√©tence']}")
                with col2:
                    st.write(f"**FAVEDS ü§∏ :** {student_data['FAVEDS ü§∏']}")
                    st.write(f"**Strat√©gie üß† :** {student_data['Strat√©gie üß†']}")
                    st.write(f"**Coop√©ration ü§ù :** {student_data['Coop√©ration ü§ù']}")
                    st.write(f"**Engagement üåü :** {student_data['Engagement üåü']}")
            
            # Boutique des Pouvoirs
            with st.expander("üõí Boutique des Pouvoirs"):
                store_items = {
                    "Le malin / la maligne": 40,
                    "Choix d‚Äôun jeu (5 min) ou donner 20 niveaux": 50,
                    "Ma√Ætre des groupes (1h30) ou doubler points de comp√©tence": 100,
                    "Ma√Ætre du th√®me d‚Äôune s√©ance": 150,
                    "Roi / Reine de la s√©quence": 300
                }
                selected_item = st.selectbox("üõçÔ∏è Choisir un pouvoir", list(store_items.keys()))
                cost = store_items[selected_item]
                st.info(f"üí∞ Co√ªt: {cost} niveaux")
                if st.button("Acheter ce pouvoir"):
                    if student_data["Niveau"] >= cost:
                        st.session_state["students"].loc[
                            st.session_state["students"]["Nom"] == selected_student, "Niveau"
                        ] -= cost
                        pouvoirs_anciens = str(student_data["Pouvoirs"]) if pd.notna(student_data["Pouvoirs"]) else ""
                        nouveaux_pouvoirs = pouvoirs_anciens + ", " + selected_item if pouvoirs_anciens else selected_item
                        st.session_state["students"].loc[
                            st.session_state["students"]["Nom"] == selected_student, "Pouvoirs"
                        ] = nouveaux_pouvoirs
                        save_data(st.session_state["students"])
                        st.success(f"üõçÔ∏è {selected_student} a achet√© '{selected_item}'.")
                    else:
                        st.error("‚ùå Niveaux insuffisants !")
            
            # Boutique des R√¥les
            with st.expander("üèÖ Boutique des R√¥les"):
                roles_store = {
                    "üß™ Testeur.euse": {"Co√ªt": 200, "Comp√©tences Requises": ["FAVEDS ü§∏"]},
                    "üé≠ D√©monstrateur.rice": {"Co√ªt": 150, "Comp√©tences Requises": ["FAVEDS ü§∏", "Engagement üåü"]},
                    "üîß Facilitateur.rice": {"Co√ªt": 150, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                    "‚öñÔ∏è Cr√©ateur.rice de r√®gles": {"Co√ªt": 250, "Comp√©tences Requises": ["Strat√©gie üß†"]},
                    "üéØ Meneur.euse tactique": {"Co√ªt": 250, "Comp√©tences Requises": ["Strat√©gie üß†", "Coop√©ration ü§ù"]},
                    "‚öñÔ∏è Arbitre / R√©gulateur.rice": {"Co√ªt": 300, "Comp√©tences Requises": ["Strat√©gie üß†", "Engagement üåü"]},
                    "ü§ù Aide-Coach": {"Co√ªt": 250, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                    "üìã Coordinateur.rice de groupe": {"Co√ªt": 300, "Comp√©tences Requises": ["Coop√©ration ü§ù"]},
                    "üåç Facilitateur.rice (social)": {"Co√ªt": 250, "Comp√©tences Requises": ["Coop√©ration ü§ù", "Engagement üåü"]},
                    "‚ö° R√©ducteur.rice des contraintes": {"Co√ªt": 200, "Comp√©tences Requises": ["FAVEDS ü§∏", "Engagement üåü"]},
                    "üõ§Ô∏è Autonome": {"Co√ªt": 200, "Comp√©tences Requises": ["Strat√©gie üß†", "Engagement üåü"]},
                    "üèÜ Responsable de s√©ance": {"Co√ªt": 350, "Comp√©tences Requises": ["Strat√©gie üß†", "Coop√©ration ü§ù", "Engagement üåü"]}
                }
                selected_role = st.selectbox("üé≠ Choisir un r√¥le", list(roles_store.keys()))
                role_cost = roles_store[selected_role]["Co√ªt"]
                required_competences = roles_store[selected_role]["Comp√©tences Requises"]
                st.info(f"üí∞ Co√ªt: {role_cost} points de comp√©tence\n\nüîπ Comp√©tences requises: {', '.join(required_competences)}")
                if st.button("Acqu√©rir ce r√¥le"):
                    student_competences = {
                        "FAVEDS ü§∏": student_data["FAVEDS ü§∏"],
                        "Strat√©gie üß†": student_data["Strat√©gie üß†"],
                        "Coop√©ration ü§ù": student_data["Coop√©ration ü§ù"],
                        "Engagement üåü": student_data["Engagement üåü"]
                    }
                    if student_data["Points de Comp√©tence"] >= role_cost and all(student_competences[comp] > 0 for comp in required_competences):
                        st.session_state["students"].loc[
                            st.session_state["students"]["Nom"] == selected_student, "Points de Comp√©tence"
                        ] -= role_cost
                        roles_anciens = str(student_data["R√¥les"]) if pd.notna(student_data["R√¥les"]) else ""
                        nouveaux_roles = roles_anciens + ", " + selected_role if roles_anciens else selected_role
                        st.session_state["students"].loc[
                            st.session_state["students"]["Nom"] == selected_student, "R√¥les"
                        ] = nouveaux_roles
                        save_data(st.session_state["students"])
                        st.success(f"üèÖ {selected_student} a acquis le r√¥le '{selected_role}'.")
                    else:
                        st.error("‚ùå Points de comp√©tence insuffisants ou comp√©tences requises non atteintes !")
        else:
            st.warning("Veuillez s√©lectionner un √©l√®ve.")
    else:
        st.warning("Aucun √©l√®ve n'a encore √©t√© ajout√©. Veuillez ajouter un √©l√®ve dans la section 'Ajouter √âl√®ve'.")
